openapi: 3.0.0
info:
  title: Tshirt Store API
  description: E commerce web to run tshirt store
  version: 1.1.0
  contact:
    email: jadiyaskj@gmail.com
    url: 'stjapps.in'
servers:
  - url: '{protocol}://localhost:4000/api/{version}'
    description: for local host
    variables:
      protocol:
        default: http
        enum:
          - http
          - https
      version:
        default: v1
        enum:
          - v1
          - v2
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer

paths:
  /signup:
    post:
      tags:
        - User
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - photo
              properties:
                name:
                  type: string
                  required: true
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
                photo:
                  in: formData
                  type: file
                  format: binary
                  required: true
      summary: signup a new user. required files are - name, email, password and photo
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    $ref: '#/definitions/User'
                example:
                  {
                    'success': true,
                    'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYjllYjIwYjZkODlhYTU3NzUzZWY0YSIsImVtYWlsIjoidGVzdDEyM0BnbWFpbC5jb20iLCJpYXQiOjE2Mzk1NzQzMDQsImV4cCI6MTYzOTgzMzUwNH0.2Y4wn1B_yWTqZLEBq4xgdF35HLHdm8QgQz1DNSCr8r4',
                    'user':
                      {
                        'name': 'test123',
                        'email': 'test123@gmail.com',
                        'role': 'user',
                        'photo':
                          {
                            'id': 'users/cgclnnfhi78urpvmqjna',
                            'secure_url': 'https://res.cloudinary.com/stj11bitd/image/upload/v1639574304/users/cgclnnfhi78urpvmqjna.png',
                          },
                        'createdAt': '2021-12-15T13:17:03.448Z',
                        '_id': '61b9eb20b6d89aa57753ef4a',
                        '__v': 0,
                      },
                  }
        400:
          description: bad request
        500:
          description: Internal Server Error
  /login:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
            example: { 'email': 'jadiyaskj@gmail.com', 'password': '123456qwerty' }
      summary: login section for any registered user
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    $ref: '#/definitions/User'
                example:
                  {
                    'success': true,
                    'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYjllYjIwYjZkODlhYTU3NzUzZWY0YSIsImVtYWlsIjoidGVzdDEyM0BnbWFpbC5jb20iLCJpYXQiOjE2Mzk1NzQzMDQsImV4cCI6MTYzOTgzMzUwNH0.2Y4wn1B_yWTqZLEBq4xgdF35HLHdm8QgQz1DNSCr8r4',
                    'user':
                      {
                        'name': 'test123',
                        'email': 'test123@gmail.com',
                        'role': 'user',
                        'photo':
                          {
                            'id': 'users/cgclnnfhi78urpvmqjna',
                            'secure_url': 'https://res.cloudinary.com/stj11bitd/image/upload/v1639574304/users/cgclnnfhi78urpvmqjna.png',
                          },
                        'createdAt': '2021-12-15T13:17:03.448Z',
                        '_id': '61b9eb20b6d89aa57753ef4a',
                      },
                  }
        400:
          description: bad request
        500:
          description: Internal Server Error
  /logout:
    get:
      tags:
        - User
      summary: get request to logout the user. Also removes httpOnly cookies
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
          description: success
        404:
          description: Not Found
        400:
          description: bad request
        500:
          description: Internal Server Error
  /forgotPassword:
    post:
      summary: sends an email with link to forgot password. Contains the token for user validation. Public hosted version will not send email to your account. Use your own SMTP details to access this feature on local project
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
              example: { 'email': 'jadiyaskj@gmail.com' }
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        404:
          description: Not Found
        400:
          description: bad request
        500:
          description: Internal Server Error
  /password/reset/{token}:
    post:
      summary: Allows user to reset password, validated based on token. send password and confirm password fields
      tags:
        - User
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirmPassword
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
              example: { 'password': '123456qwerty', 'confirmPassword': '123456qwerty' }
      responses:
        200:
          description: password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      createdAt:
                        type: string
              example:
                {
                  'success': true,
                  'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYmE5ZWQxMzhkMjdjN2RjMGUyZDYyZCIsImVtYWlsIjoiamFkaXlhc2tqQGdtYWlsLmNvbSIsImlhdCI6MTYzOTYyMDM0NiwiZXhwIjoxNjM5ODc5NTQ2fQ.I5BAAhkGDdJidrQg52UKvx93pLKogFVYKM4BRDQSpI0',
                  'user':
                    {
                      'photo':
                        {
                          'id': 'users/xyffogqxf2hxpqkcoxan',
                          'secure_url': 'https://res.cloudinary.com/stj11bitd/image/upload/v1639620305/users/xyffogqxf2hxpqkcoxan.png',
                        },
                      '_id': '61ba9ed138d27c7dc0e2d62d',
                      'name': 'Sumit Jadiya',
                      'email': 'jadiyaskj@gmail.com',
                      'role': 'user',
                      'createdAt': '2021-12-16T02:00:44.887Z',
                    },
                }
        404:
          description: Not Found
        400:
          description: bad request
        500:
          description: Internal Server Error
  /userDashboard:
    get:
      summary: Gets all details about logged in user. Send token in cookies as named token or send Bearer Auth
      tags:
        - User
      responses:
        200:
          description: password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    $ref: '#/definitions/User'
              example:
                {
                  'success': true,
                  'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYmE5ZWQxMzhkMjdjN2RjMGUyZDYyZCIsImVtYWlsIjoiamFkaXlhc2tqQGdtYWlsLmNvbSIsImlhdCI6MTYzOTYyMDM0NiwiZXhwIjoxNjM5ODc5NTQ2fQ.I5BAAhkGDdJidrQg52UKvx93pLKogFVYKM4BRDQSpI0',
                  'user':
                    {
                      'photo':
                        {
                          'id': 'users/xyffogqxf2hxpqkcoxan',
                          'secure_url': 'https://res.cloudinary.com/stj11bitd/image/upload/v1639620305/users/xyffogqxf2hxpqkcoxan.png',
                        },
                      '_id': '61ba9ed138d27c7dc0e2d62d',
                      'name': 'Sumit Jadiya',
                      'email': 'jadiyaskj@gmail.com',
                      'role': 'user',
                      'createdAt': '2021-12-16T02:00:44.887Z',
                    },
                }
        404:
          description: Not Found
        401:
          description: Unauthorized
        400:
          description: bad request
        500:
          description: Internal Server Error
  /password/update:
    post:
      tags:
        - User
      summary: Update password of registered user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
              example: { 'oldPassword': '123456qwerty', 'newPassword': '123456@qwerty' }
      responses:
        200:
          description: password updated
        400:
          description: bad request
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  /userDashboard/update:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
              properties:
                email:
                  type: string
                name:
                  type: string
              example: { 'email': 'test@gmail.com', 'name': 'qwerty test' }
      responses:
        200:
          description: user dashboard updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                example: { 'success': true }
        400:
          description: bad request
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  /admin/users:
    get:
      tags:
        - Admin
      summary: If user is admin, response will get array of all users

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  users:
                    type: array
                    items:
                      $ref: '#/definitions/User'
        400:
          description: bad request
        500:
          description: Internal Server Error
  /admin/user/{id}:
    get:
      tags:
        - Admin
      summary: If user is admin, response will get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            id:
              type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  user:
                    $ref: '#/definitions/User'
        400:
          description: bad request
        500:
          description: Internal Server Error

    put:
      tags:
        - Admin
      summary: If user is admin, user profile will be updated by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            id:
              type: string
        - in: formData
          name: name
          required: true
          schema:
            type: string
        - in: formData
          name: email
          required: true
          schema:
            type: string
        - in: formData
          name: role
          required: true
          schema:
            type: string
            enum: [user, admin, manager]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  user:
                    $ref: '#/definitions/User'
        400:
          description: bad request
        500:
          description: Internal Server Error

    delete:
      tags:
        - Admin
      summary: If user is admin, user profile will get deleted by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            id:
              type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
        400:
          description: bad request
        500:
          description: Internal Server Error

  /manager/users:
    get:
      tags:
        - Manager
      summary: If user is manager, response will get array of all users

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  users:
                    type: array
                    items:
                      $ref: '#/definitions/User'
        400:
          description: bad request
        500:
          description: Internal Server Error

definitions:
  User:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      role:
        type: string
      photo:
        type: object
        properties:
          id:
            type: string
          secure_url:
            type: string
      createdAt:
        type: string
      _id:
        type: string
